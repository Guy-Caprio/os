#!/bin/bash

##################
## GLOBAL STYLE ##
##################
red="\e[1;31m"
green="\e[1;32m"
yellow="\e[1;33m"
nc="\e[0m"

###############
## COUNTDOWN ##
###############
_timer() {
  for i in {5..1}
  do
    echo -en "$red[Warning] Installation in [$i] seconds - [Ctrl + C] to Cancel$n \r" && sleep 1
  done
}

########################
## FiRMWARE DETECTiON ##
########################
_firmware() {
  efivar -l >/dev/null 2>&1
  if [[ $? -eq 0 ]]; then
    FIRMWARE="UEFI"
    part_table="GPT"
    part_code="g"
    part_primary=""
    part_extended=""
    boot_filesystem="fat -F 32"
  else
    FIRMWARE="BIOS"
    part_table="MBR"
    part_code="o"
    part_primary="p\n"
    part_extended="e\n"
    boot_filesystem="ext2"
  fi
  part_order=(0 1 2 3 4 5 6)
}

######################
## iNSTALL SETTiNGS ##
######################
_settings() {
  # HOSTNAME
  HOST_name="cloudhook.domain"
  # ROOT PASSWORD
  ROOT_passwd="root"
  # ADMIN PASSWORD
  ADMIN_passwd="admin"
  # cloudhook PASSWORD
  CLOUDHOOK_passwd="cloudhook"
  # keymap
  KEYMAP="fr-pc"
}

#######################
## DiSK PARTiTiONiNG ##
#######################
_disk_part() {
  echo -e "\n$green==>$nc Partitionning disk..."

  part_error="\n$red==> Partitionning error! Exiting... $nc"

  # MBR or GPT
  echo -e "$FIRMWARE detected! Checking disk type..."

  # HDA or SDA
  fdisk -l | grep -q "/dev/sda"
  if [[ $? -eq 0 ]]; then
    _disk="sda"
  else
    _disk="hda"
  fi
  echo -e "/dev/$_disk detected! The drive will be erased..."

  fdisk -l /dev/$_disk
  echo -e "\n$yellow==>$nc Creating $part_table partition table on /dev/$_disk..."
  printf "$part_code\nw" | fdisk /dev/$_disk

  # Calcul selon la taille du disque et de la RAM
  # HDD min.: 10G
  disk_size=$(fdisk -l | awk -F " " 'NR==1 {print $3}' | cut -d"," -f 1)
  ram_size=$(( $(free -g | awk 'NR==2 {print $2}') + 1))

  boot_size="512M"
  root_size="2G"
  data_size=""

  if [[ $ram_size -ge 4 ]]; then
    swap_size="4G"
  else
    swap_size="${ram_size}G"
  fi

  if [[ $disk_size -ge 15 ]]; then
    var_size="4G"
  else
    var_size="2G"
  fi

  # TODO: Vérifier si le filesystem ext4 correspond à l'utilisation des partitions / Voir ZFS
  # https://wiki.archlinux.org/index.php/file_systems
  # https://wiki.archlinux.org/index.php/Installing_Arch_Linux_on_ZFS

  # BOOT on /dev/xxx1
  echo -e "\n$yellow==>$nc /boot partition size => $boot_size"
  echo -e "Creating boot /dev/$_disk${part_order[1]} [$boot_size]..."
  printf "n\n$part_primary\n\n+$boot_size\nw" | fdisk /dev/$_disk
  yes | mkfs.$boot_filesystem /dev/$_disk${part_order[1]}

  # SWAP on /dev/xxx2
  echo -e "\n$yellow==>$nc swap partition size => $swap_size"
  echo -e "Creating swap /dev/$_disk${part_order[2]} [$swap_size]..."
  printf "n\n$part_primary\n\n+$swap_size\nw" | fdisk /dev/$_disk
  yes | mkswap /dev/$_disk${part_order[2]}

  # ROOT on /dev/xxx3
  echo -e "\n$yellow==>$nc root partition size => $root_size"
  echo -e "Creating root /dev/$_disk${part_order[3]} [$root_size]..."
  printf "n\n$part_primary\n\n+$root_size\nw" | fdisk /dev/$_disk
  yes | mkfs.ext4 /dev/$_disk${part_order[3]}

  # EXTENDED PARTITION /dev/xxx4
  echo -e "\n$yellow==>$nc Creating extended partition on /dev/$_disk${part_order[4]}..."
  printf "n\n$part_extended\n\n\nw" | fdisk /dev/$_disk

  # VAR on /dev/xxx5
  echo -e "\n$yellow==>$nc /var partition size => $var_size"
  echo -e "Creating var /dev/$_disk${part_order[5]} [$var_size]..."
  printf "n\n\n+$var_size\nw" | fdisk /dev/$_disk
  yes | mkfs.ext4 /dev/$_disk${part_order[5]}

  # TMP TODO: Already created by systemd as a tmpfs, check how to configure it.

  # DATA on /dev/xxx6
  echo -e "\n$yellow==>$nc /data partition will use all free space"
  echo -e "Creating /data /dev/$_disk${part_order[6]}..."
  printf "n\n\n$data_size\nw" | fdisk /dev/$_disk
  yes | mkfs.ext4 /dev/$_disk${part_order[6]}
}

########################
## MOUNTiNG PARTiTiON ##
########################
_mount_part() {
  echo -e "\n$green==>$nc Mounting partitions & activating swap..."
  mount /dev/$_disk${part_order[3]} /mnt
  mkdir /mnt/{boot,var,data}
  if [[ "$FIRMWARE" == "UEFI" ]]; then
    mkdir -p /mnt/boot/efi/EFI
    mount -t vfat /dev/$_disk${part_order[1} /boot/efi
  else
    mount /dev/$_disk${part_order[1]} /mnt/boot
  fi
  swapon /dev/$_disk${part_order[2]}
  mount /dev/$_disk${part_order[5]} /mnt/var
  mount /dev/$_disk${part_order[6]} /mnt/data
}

####################
## SYSTEM iNSTALL ##
####################
_install_system() {
  # Export root
  echo -e "$green==>$nc Exporting root partition..."
  time cp -ax / /mnt

  # Export kernel
  echo -e "\n$green==>$nc Exporting kernel..."
  cp -vaT /run/archiso/bootmnt/arch/boot/$(uname -m)/vmlinuz /mnt/boot/vmlinuz-linux

  # Generate fstab
  echo -e "\n$green==>$nc Generating fstab..."
  genfstab -U -p /mnt >> /mnt/etc/fstab

  # Chroot into
  echo -e "\n$green==>$nc General Configuration..."

  arch-chroot /mnt /bin/bash <<EOF
  # Disable archiso services
  systemctl disable pacman-init.service choose-mirror.service
  rm -r /etc/systemd/system/{choose-mirror.service,pacman-init.service,etc-pacman.d-gnupg.mount,getty@tty1.service.d}
  rm /etc/systemd/scripts/choose-mirror

  # Remove archiso live scripts
  rm /root/{.install,.zlogin}
  rm /etc/mkinitcpio-archiso.conf
  rm -r /etc/initcpio

  # New .zlogin
  echo '~/.configure' > /root/.zlogin

  # Basic Configuration

  # Create users
  echo -e "\n${yellow}==>${nc} Setting root password..."
  echo "root:${ROOT_passwd}" | chpasswd
  echo -e "\n${yellow}==>${nc} Setting admin user password..."
  groupadd admin
  useradd -g admin -G wheel admin
  echo "admin:${ADMIN_passwd}" | chpasswd
  echo -e "\n${yellow}==>${nc} Setting cloudhook user password..."
  groupadd cloudhook
  useradd -g cloudhook cloudhook
  echo "cloudhook:${CLOUDHOOK_passwd}" | chpasswd

  echo -e "\n${yellow}==>${nc} Setting hostname... "
  echo $HOST_name > /etc/hostname

  echo -e "\n${yellow}==>${nc} Setting and generating locale... "
  locale-gen

  echo -e "\n${yellow}==>${nc} Setting keyboard... "
  echo "KEYMAP=${KEYMAP}" > /etc/vconsole.conf

  echo -e "\n${yellow}==>${nc} Setting timezone... "
  ln -sf /usr/share/zoneinfo/UTC /etc/localtime

  # initramfs
  echo -e "\n${yellow}==>${nc} Setting Linux environment... "
  mkinitcpio -p linux

  #Enable basic services
  systemctl enable sshd.service
  systemctl enable ntpd.service
EOF
}

########################
## BOOTLOADER iNSTALL ##
########################
_install_bootloader() {
  echo -e "\n$green==>$nc Installating $FIRMWARE Boot Loader..."
  if [[ "$FIRMWARE" == "UEFI" ]]; then
    arch-chroot /mnt /bin/bash <<EOF
    # TODO: Le cas doit être géré !
    # https://wiki.archlinux.fr/Syslinux#Syst.C3.A8mes_UEFI
EOF
  else
    arch-chroot /mnt /bin/bash <<EOF
    syslinux-install_update -iam
EOF
  fi
}

#################################
## 10-network.rules generation ##
#################################
_configure_network_devices() {
  echo -e "\n$green==>$nc Configuring network udev rules..."

  arch-chroot /mnt /bin/bash <<\EOF
  devname=($(ls -v /sys/class/net))
  devname=(${devname[@]/lo})

  for (( i = 0; i < ${#devname[@]}; i++ ))
  do
    devpath+=($(dirname $(readlink -f /sys/class/net/${devname[$i]})))
  done

  devpath=(${devpath[@]/\/sys})

  for (( i = 0; i < ${#devpath[@]}; i++ ))
  do
    echo "SUBSYSTEM==\"net\", DEVPATH==\"${devpath[$i]}/*\", NAME=\"net$i\"" >> /etc/udev/rules.d/10-network.rules
  done
EOF
}

########################
## POSTGRESQL iNSTALL ##
########################
_install_postgresql() {
  echo -e "\n$green==>$nc Installing PostgreSQL..."

  arch-chroot /mnt /bin/bash <<EOF
  echo -e "\n${yellow}==>${nc} Initializing cluster..."
  # Set up cluster
  mkdir -p /data/postgres/data
  chown -R postgres:postgres /data/postgres/
  su - postgres -c 'initdb --locale en_US.UTF-8 -E UTF8 -D '/data/postgres/data''
  if [[ \$? -eq 0 ]]; then
    echo -e "\n${green}==> PostgreSQL service initialized successfully.${nc}"
  else
    echo -e "\n${red}==> PostgreSQL service failed to initialize.${nc}"
  fi

  # Start process in /run/
  echo -e "\n${yellow}==>${nc} Starting PostgreSQL..." && sleep 2
  mkdir /run/postgresql
  chown postgres:postgres /run/postgresql
  su - postgres -c '/usr/bin/pg_ctl -D /data/postgres/data start'
  if [[ \$? -eq 0 ]]; then
    echo -e "\n${green}==> PostgreSQL service started successfully.${nc}"
  else
    echo -e "\n${red}==> PostgreSQL service failed to start.${nc}"
  fi

  # Restore SQL Dump file
  echo -e "\n${yellow}==>${nc} Restoring PostgreSQL database dump..." && sleep 2
  createdb cloudhook -U postgres
  if [[ \$? -eq 0 ]]; then
    psql cloudhook < /srv/database/cloudhook.sql -U postgres --set ON_ERROR_STOP=on
    if [[ \$? -eq 3 ]]; then
      echo -e "\n${red}==> PostgreSQL database dump failed to restore, operation aborted.${nc}"
    elif [[ \$? -eq 0 ]]; then
      echo -e "\n${green}==> PostgreSQL database dump restored successfully.${nc}"
    fi
  else
    echo -e "\n${red}==> Failed to create PostgreSQL database.${nc}"
  fi

  # Enable service at boot
  echo -e "\n${yellow}==>${nc} Enabling PostgreSQL service..."
  systemctl enable postgresql.service
EOF
}

########################
## NODEJS APP iNSTALL ##
########################
_install_app() {
  # TODO: Réaliser l'extraction des modules nodejs et autre ...
  echo -e "\n$green==>$nc Installing Cloudhook..."
  # TODO: Actuellement, c'est une copie complète du dépôt Github qui est faite.
  echo -e "\n$yellow==>$nc Enabling Web services... "
  arch-chroot /mnt /bin/bash <<EOF
  systemctl enable cloudhook.service
  systemctl enable nginx.service
EOF
}

######################
## RUN iNSTALLATION ##
######################

# TODO: Réaliser un script dialog qui retranscrit les étapes ci-dessous

timedatectl set-timezone UTC
datetime=`date '+%d-%m-%Y_%H:%M:%S'`
LOGFILE="install_$datetime.log"

_timer
_firmware
_settings
_disk_part
_mount_part

if [ $? -eq 0 ]; then
  echo -e "\n$green==> System is ready for installation !$nc"
  (_install_system && _install_bootloader && _configure_network_devices && _install_postgresql && _install_app) 2>&1 | tee -a $LOGFILE
  echo -e "$green==>$yellow Installation report:$nc"
  cat $LOGFILE | grep "error" >/dev/null 2>&1
  if [[ $? -eq 0 ]]; then
    cat $LOGFILE | grep "error"
  else
    echo "\n$green No error reported.$nc"
  fi
  mv $LOGFILE /mnt/var/log/
else
  echo -e $part_error
  exit
fi

echo -e "\n$yellow==> Unmounting partition and Rebooting...$nc"
umount -R /mnt && reboot
