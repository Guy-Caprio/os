#!/bin/bash

##################
## GLOBAL STYLE ##
##################
red="\e[1;31m"
green="\e[1;32m"
yellow="\e[1;33m"
nc="\e[0m"

########################
## FiRMWARE DETECTiON ##
########################
_firmware() {
    efivar -l >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        FIRMWARE="UEFI"
        part_table="GPT"
        part_code="g"
        part_primary=""
        part_extended=""
        boot_filesystem="fat -F 32"
    else
        FIRMWARE="BIOS"
        part_table="MBR"
        part_code="o"
        part_primary="p\n"
        part_extended="e\n"
        boot_filesystem="ext2"
    fi
    part_order=(0 1 2 3 4 5 6)
}

######################
## iNSTALL SETTiNGS ##
######################
_settings() {

    # HOSTNAME
    HOST_name=app_name.domain

    # ROOT PASSWORD
    ROOT_passwd=app_name
}

#######################
## DiSK PARTiTiONiNG ##
#######################
_disk_part() {
    echo -e "\n==> Partitionning disk... "

    part_error="$red \n==> Partitionning error! Exiting... $nc"

    # MBR or GPT
    echo -e "$FIRMWARE detected! Checking disk type..."

    # HDA or SDA
    fdisk -l | grep -q "/dev/sda"
    if [[ $? -eq 0 ]]; then
        _disk="sda"
    else
        _disk="hda"
    fi
    echo -e "/dev/$_disk detected! The drive will be erased..."

    fdisk -l /dev/$_disk
    echo -e "Creating $part_table partition table on /dev/$_disk..."
    printf "$part_code\nw" | fdisk /dev/$_disk

    # TODO: Réaliser un calcul selon la taille du disque et la RAM 
    # GENERIC VM --- HDD <= 10 GB; RAM <= 2 GB
    boot_size="512M"
    swap_size="2G"
    root_size="1G"
    var_size="2G"
    data_size=""

    # TODO: Vérifier si le filesystem ext4 correspond à l'utilisation des partitions / Voir ZFS
    # https://wiki.archlinux.org/index.php/file_systems
    # https://wiki.archlinux.org/index.php/Installing_Arch_Linux_on_ZFS

    # BOOT on /dev/xxx1
    echo -e "\n==> /boot partition size => default: 512M "
    echo -e "Creating boot /dev/$_disk${part_order[1]} [$boot_size]..."
    printf "n\n$part_primary\n\n+$boot_size\nw" | fdisk /dev/$_disk
    yes | mkfs.$boot_filesystem /dev/$_disk${part_order[1]}

    # SWAP on /dev/xxx2
    echo -e "\n==> swap partition size => default: 2G "
    echo -e "Creating swap /dev/$_disk${part_order[2]} [$swap_size]..."
    printf "n\n$part_primary\n\n+$swap_size\nw" | fdisk /dev/$_disk
    yes | mkswap /dev/$_disk${part_order[2]}

    # ROOT on /dev/xxx3
    echo -e "\n==> root partition size => default: 1G "
    echo -e "Creating root /dev/$_disk${part_order[3]} [$root_size]..."
    printf "n\n$part_primary\n\n+$root_size\nw" | fdisk /dev/$_disk
    yes | mkfs.ext4 /dev/$_disk${part_order[3]}

    # EXTENDED PARTITION /dev/xxx4
    echo -e "Creating extended partition on /dev/$_disk${part_order[4]} ..."
    printf "n\n$part_extended\n\n\nw" | fdisk /dev/$_disk

    # VAR on /dev/xxx5
    echo -e "\n==> /var partition size => default: 2G "
    echo -e "Creating var /dev/$_disk${part_order[5]} [$var_size]..."
    printf "n\n\n+$var_size\nw" | fdisk /dev/$_disk
    yes | mkfs.ext4 /dev/$_disk${part_order[5]}

    # TMP TODO: Already created by systemd as a tmpfs, check how to configure it.

    # DATA on /dev/xxx6
    echo -e "\n==> /data partition will use all free space "
    echo -e "Creating /data /dev/$_disk${part_order[6]}..."
    printf "n\n\n$data_size\nw" | fdisk /dev/$_disk
    yes | mkfs.ext4 /dev/$_disk${part_order[6]}
}

########################
## MOUNTiNG PARTiTiON ##
########################
_mount_part() {
    echo -e "Mounting partitions & activate swap..."
    mount /dev/$_disk${part_order[3]} /mnt
    mkdir /mnt/{boot,var,data}
    if [[ "$FIRMWARE" == "UEFI" ]]; then
        mkdir -p /mnt/boot/efi/EFI
        mount -t vfat /dev/$_disk${part_order[1} /boot/efi
    else
        mount /dev/$_disk${part_order[1]} /mnt/boot
    fi
    swapon /dev/$_disk${part_order[2]}
    mount /dev/$_disk${part_order[5]} /mnt/var
    mount /dev/$_disk${part_order[6]} /mnt/data
}

####################
## SYSTEM iNSTALL ##
####################
_install_system() {
    echo -e "\n==> Installing system... "

    # Export root
    echo -e "\n==> Exporting root partition... "
    time cp -ax / /mnt

    # Export kernel
    echo -e "\n==> Exporting kernel... "
    cp -vaT /run/archiso/bootmnt/arch/boot/$(uname -m)/vmlinuz /mnt/boot/vmlinuz-linux

    # Generate fstab
    echo -e "\n==> Generating fstab... "
    genfstab -U -p /mnt >> /mnt/etc/fstab

    # Chroot into
    echo -e "\n==> Chroot & Configuration script injection... "
    arch-chroot /mnt /bin/bash <<EOF

    # Disable archiso services
    systemctl disable pacman-init.service choose-mirror.service
    rm -r /etc/systemd/system/{choose-mirror.service,pacman-init.service,etc-pacman.d-gnupg.mount,getty@tty1.service.d}
    rm /etc/systemd/scripts/choose-mirror
    # TODO: Après que la partie configuration réseau soit finie, décommenter la ligne en dessous
    #rm /etc/udev/rules.d/81-dhcpcd.rules

    # Remove archiso live scripts
    rm /root/{install,.zlogin}
    rm /etc/mkinitcpio-archiso.conf
    rm -r /etc/initcpio

    # New .zlogin
    #echo '~/.configure' > /root/.zlogin
    echo '~/.configure' > /etc/skel/.zlogin

    # Basic Configuration
    echo -e "==> Setting root password... "
    echo "root:${ROOT_passwd}" | chpasswd
    echo -e "==> Setting hostname... "
    echo $HOST_name > /etc/hostname
    echo -e "==> Setting and generating locale... "
    locale-gen
    echo -e "==> Setting keyboard... "
    echo "KEYMAP=" > /etc/vconsole.conf
    echo -e "==> Setting timezone... "
    ln -s /usr/share/zoneinfo/UTC /etc/localtime

    # Create simple user
    echo -e "==> Setting user password... "
    groupadd admin
    useradd -g admin -m admin
    echo "admin:admin" | chpasswd

    # initramfs
    echo -e "==> Setting Linux environment... "
    mkinitcpio -p linux

EOF
}

########################
## BOOTLOADER iNSTALL ##
########################
_install_bootloader() {
    echo -e "Installating $FIRMWARE Boot Loader..."
    if [[ "$FIRMWARE" == "UEFI" ]]; then
        arch-chroot /mnt /bin/bash <<EOF
        # TODO: Le cas doit être géré !
        # https://wiki.archlinux.fr/Syslinux#Syst.C3.A8mes_UEFI
EOF
    else
        arch-chroot /mnt /bin/bash <<EOF
        syslinux-install_update -iam
EOF
    fi
}

########################
## POSTGRESQL iNSTALL ##
########################
_install_postgresql() {
    # TODO: Réaliser la création de la database
    echo -e "SQL DUMP RESTORE..." && sleep 2s
}

########################
## NODEJS APP iNSTALL ##
########################
_install_app() {
    # TODO: Réaliser l'extraction des modules nodejs et autre ...
    echo -e "NODEJS APP EXTRACTION..." && sleep 2s
}

######################
## RUN iNSTALLATION ##
######################

# TODO: Réaliser un script dialog qui retranscrit les étapes ci-dessous

timedatectl set-timezone UTC
datetime=`date '+%d-%m-%Y_%Hh%Mm%Ss'`
LOGFILE="install_$datetime.log"

_firmware
_settings
_disk_part
_mount_part

if [ $? -eq 0 ]; then
    echo "System is ready for installation"
    (_install_system && _install_bootloader && _install_postgresql && _install_app) 2>&1 | tee -a $LOGFILE
    mv $LOGFILE /mnt/var/log/
    echo -e "$green==>$red App installation report: $nc"
    cat $LOGFILE | grep "error" >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        cat $LOGFILE | grep "error"
    else
        echo "Installation finished. No error reported."
    fi
else
    echo -e $part_error
    exit
fi

echo -e "Unmounting partition and Rebooting ..."
umount -R /mnt && reboot
